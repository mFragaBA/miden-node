syntax = "proto3";
package account;

import "digest.proto";

message AccountId {
    // A miden account is defined with a little bit of proof-of-work, the id itself is defined as
    // the first word of a hash digest. For this reason account ids can be considered as random
    // values, because of that the encoding bellow uses fixed 64 bits, instead of zig-zag encoding.
    fixed64 id = 1;
}

message AccountInfo {
    AccountId account_id = 1;
    digest.Digest account_hash = 2;
    fixed32 block_num = 3;
}

message FungibleAsset {
    // Faucet ID.
    AccountId faucet_id = 1;
    // Amount of asset.
    uint64 amount = 2;
}

message NonFungibleAsset {
    // Non-fungible asset in internal (`Word`) representation.
    digest.Digest asset = 1;
}

message Asset {
    // Asset enumeration.
    oneof asset {
        FungibleAsset fungible = 1;
        NonFungibleAsset non_fungible = 2;
    }
}

message AssetVault {
    // Assets vector.
    repeated Asset assets = 1;
}

message AccountStorage {
    // Full account storage serialized using Miden serialization procedure.
    bytes data = 1;
}

message AccountCode {
    // Module AST tree serialized using Miden serialization procedure.
    bytes module = 1;
    // Procedures vector.
    repeated digest.Digest procedures = 2;
}

message AccountFullDetails {
    // Account ID.
    AccountId id = 1;
    // All account's assets.
    AssetVault vault = 2;
    // Account storage.
    AccountStorage storage = 3;
    // Account code.
    AccountCode code = 4;
    // Account nonce.
    uint64 nonce = 5;
}

message AccountStorageDelta {
    // Items to be cleared in the account's storage.
    bytes cleared_items = 1;
    // Vector of slots to be updated in the account's storage in the same order, as items.
    bytes updated_storage_slots = 2;
    // Vector of items to be updated in the account's storage in the same order, as slots.
    repeated digest.Digest updated_items = 3;
}

message AccountVaultDelta {
    // Assets to be added into the account's vault.
    repeated Asset added_assets = 1;
    // Assets to be removed from the account's vault.
    repeated Asset removed_assets = 2;
}

message AccountDelta {
    // Account's storage delta.
    AccountStorageDelta storage = 1;
    // Account's assets vault delta.
    AccountVaultDelta vault = 2;
    // Account's new nonce.
    optional uint64 nonce = 3;
}

message AccountDetails {
    // Details enumeration for public accounts.
    oneof details {
        account.AccountFullDetails full = 1;
        account.AccountDelta delta = 2;
    }
}
